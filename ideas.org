* UNDER CONSIDERATION
** 'following' squads
squads manually placed within N tiles of the player character could be assigned to 'follow' the player.
however, if the player gets more than M tiles away from the squad, the squad will retreat to the nearest
assembler and become a 'normal' hunting squad.
** per-assembler 'AIs'
- each assembler could be assigned an AI, and settings related to
  it. e.g. "Search and destroy", or "Keep Radius Clear; Radius = 500"
- squads being created/merged at an assembler would take on the
  'settings' of the assembler, if it has any.
* IN PROGRESS
** Squads remember spawning assembler
currently, each squad freely transfers from assembler to assembler.
It might be better if the squads stayed assigned to their spawning assembler, unless
that assembler got picked up.
- This allows the player more control, at the expense of some
  occasionally odd behavior, where a retreating squad would return to
  an assembler that was significantly farther away than a nearby one.
- This also makes it necessary to remove assemblers as you expand your
  borders, otherwise squads will continuing 'homing' on an area that
  has been 'left behind'
- Should search-and-destroy squads remember their home assembler?
  probably not. If retreating, they should simply retreat to the
  nearest assembler for maximum killing efficiency.
* IMPLEMENTED
** better unitGroup failure logic
- take into account how recent the failures were. History is not
  interesting; recency is.
- also take into account distance of group members. If any group
  members are too far away, then this may not be a command failure
  after all.
** soldier departures
don't give individual units multiple chances - if they get removed,
are far, and can't be teleported, then kick them out immediately
(before they get killed).

if not contains(squad, soldier) then
    if far then
        if not teleport
            kick_out()
        end
    else
        leave alone - maybe they'll get it together?
        but set a flag with the most recent time kicked out
        if it happens again within a certain period of time,
        kick_out()
    end
end

** command failures - how to know?
- use tick time plus distance since command issued to determine if the
  command is failing.
- alternatively, maybe we can just interpret unit group failure as
  failure. This seems nearly 100% reliable.

** when unit group fails N times, instead of disbanding, proceed to the 'next strategy'
- If the squad had been ordered to attack and it cannot accomplish
  this, order it to retreat.
- If the squad had been ordered to retreat and it cannot accomplish
  this, order it to wander in place and inform the player of its
  location.
- If the squad had been ordered to retreat or attack and it cannot
  accomplish this, but is within range of an active assembler, order
  it to wander in place, and inform the player that it is resting at
  the given location.

** hybrid targeting AI
- squads can now target with a more complex system, which splits the
  difference between a totally assembler-centric posture and the basic
  'find nearest enemy' AI.
* WONTFIX
** check for squad integrity (i.e., all soldiers in group) every M ticks, more frequently than reissuing orders?
checking for squad integrity is expensive, so we want to do this an order of magnitude
fewer times than we do our basic existence checks.
however, this would help squads with lagging members to make more progress in general.
